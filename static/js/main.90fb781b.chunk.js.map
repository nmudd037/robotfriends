{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","users","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialstateSearch","initialstateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.90fb781b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t/*const {name, email, id} = props; */ \r\n\treturn (\r\n       <div className = \"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\" >\r\n         <img alt = \"robots\" src = {`https://robohash.org/${id}?200x200`} />\r\n          <div>\r\n           \t <h2> {name} </h2>\r\n           \t <p> {email} </p>\r\n          </div>\r\n        </div>\r\n\t );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n  /*  if(true)  {\r\n    \tthrow new Error('For demonstrating Error Boundaries concept');\r\n    }  */\r\n    // Error Boundaries Expanation\r\n\r\n    return (\r\n    \t<div>\r\n    \t    {\r\n\t    \t    robots.map((users, i) => {\r\n\t    \t       return (\t\r\n\t       \t  \t\t\t<Card \r\n\t\t\t       \t\t\tkey = {users} \r\n\t\t\t       \t\t\tid = {robots[i].id} \r\n\t\t\t       \t\t\tname = {robots[i].name} \r\n\t\t\t       \t\t\temail = {robots[i].email}\r\n\t\t       \t\t\t/>\r\n\t\t       \t\t);\r\n\t\t       \t})\r\n\t       \t}\t\t\t\r\n        </div>\t\r\n    );\r\n};\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n       <div className = 'pa2'>\r\n\t       \t<input \r\n\t       \t\tclassName = 'pa3 ba b--green bg-lightest-blue '\r\n\t       \t\ttype = 'search' \r\n\t       \t\tplaceholder = 'Search Robots..' \r\n\t       \t\tonChange = {searchChange}\r\n\t       \t/>\r\n\t    </div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// CSS: overflow-y  JSX: overflowY \r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t   <div style = {{ overflowY: 'scroll', border: '3px solid black',height: '600px'  }}>\r\n\t\t   {props.children}\r\n\t\t</div>\r\n\t);   \t\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { \r\n            hasError: false\r\n\t\t }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n    \tthis.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n    \tif (this.state.hasError) {\r\n    \t\treturn <h1> Something went wrong! </h1>\r\n    \t}\t\r\n    \treturn this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\n// import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component  {\r\n  \t//constructor() {\r\n\t\t//super()\r\n\t\t//this.state = {\r\n\t\t\t// robots: robots, \r\n\t\t\t//robots: [],\r\n\t\t\t//searchfield: ''\r\n\t\t//}\r\n\t//}\r\n    \r\n   \r\n\t/* New Code */\r\n\tcomponentDidMount() {\r\n\t\t //console.log(this.props.store.getState());\r\n\t\t//fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t//.then(response => response.json())\r\n\t\t//.then(users => this.setState({robots: users}));\r\n\t   this.props.onRequestRobots();\r\n\t}\r\n\t/* onSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value})\t\r\n\t} */\r\n\trender(){\r\n\t\t//const {robots, searchfield} = this.state;\r\n\t\t//const { robots } = this.state;\r\n\t\tconst { searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\t//return !robots.length ? \r\n        return isPending ? \r\n        <h1> Loading... </h1> :\r\n\t\t(\r\n\t\t  <div className = 'tc'>\r\n\t\t\t\t<h1 className = 'f1'> Robo Friends </h1>\r\n\t\t\t\t<SearchBox searchChange ={onSearchChange}/>\r\n\t\t       \t<Scroll>\r\n                    <ErrorBoundary>\r\n\t\t       \t\t\t<Cardlist robots= {filteredRobots}/>\r\n\t\t       \t\t</ErrorBoundary>\t\r\n\t\t       \t</Scroll>\r\n\t\t    </div>\r\n\t\t)\t\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n\t//console.log(text);\r\n\treturn {\t\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t} \r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//Redux-Thunk for Async Actions\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst initialstateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialstateSearch, action = {}) => {\r\n\t//console.log(action.type);\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD :\r\n\t\t    return Object.assign({}, state, { searchField: action.payload });\r\n\t\t    // return { ...state, { searchField: action.payload } } Alternative: Object destructurring or Object Spread Operator\r\n        default:\r\n            return state;\r\n\t}\r\n}\r\n\r\nconst initialstateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n\r\n};\r\n\r\nexport const requestRobots = (state = initialstateRobots, action = {}) => {\r\n    switch(action.type) {\r\n    \tcase REQUEST_ROBOTS_PENDING:\r\n    \t    return Object.assign({}, state, { isPending: true });\r\n    \tcase REQUEST_ROBOTS_SUCCESS:\r\n    \t    return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    \tcase REQUEST_ROBOTS_FAILED:\r\n    \t    return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;        \r\n\r\n    }   \r\n} \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\n// const store = createStore(rootReducer); ( In real-life scenario we might have many reducers so we combine all reducers to create one reducer called rootReducer in the store. )\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store = {store}> \n        <App />  { /* <App store = {store} /> */ }    \n      </Provider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}